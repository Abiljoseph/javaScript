Qus 1). )Flatland Space Stations

      Flatland is a country with a number of cities, some of which have space stations. Cities are numbered consecutively and each has a road of 1km length connecting it to the next city.
      It is not a circular route, so the first city doesn't connect with the last city. Determine the maximum distance from any city to its nearest space station.

     Example

     n=3
     c=[1]
     There are n=3 cities and city 1 has a space station. They occur consecutively along a route. City 0 is 1-0=1 unit away and city 2 is  2-1 =1 units away. 
     City 1 is 0 units from its nearest space station as one is located there. The maximum distance is 1.



     Sample Input


     STDIN   Function
     -----   --------
     5 2     n = 5, c[] size m = 2
     0 4     c = [0, 4]


     Sample Output

     2

===============================================================================================================


  ans ).function maxDistance(n, c) {
    // Sort the array of space station locations in ascending order
    c.sort((a, b) => a - b);

    let maxDistance = 0;
    let prevSpaceStation = -1;

    // Iterate through each city
    for (let i = 0; i < n; i++) {
        let distanceToNearestSpaceStation;

        // If the city has a space station, update the previous space station location
        if (c.includes(i)) {
            prevSpaceStation = i;
        } else {
            // If the city does not have a space station, calculate the distance to the nearest space station
            if (prevSpaceStation === -1) {
                // If no space station has been found yet, the distance is from the current city to the first space station
                distanceToNearestSpaceStation = c[0] - i;
            } else if (prevSpaceStation === c[c.length - 1]) {
                // If the previous space station is the last one, the distance is from the current city to the last space station
                distanceToNearestSpaceStation = i - prevSpaceStation;
            } else {
                // Otherwise, the distance is the minimum of the distance to the previous and next space stations
                distanceToNearestSpaceStation = Math.min(i - prevSpaceStation, c[c.indexOf(prevSpaceStation) + 1] - i);
            }

            // Update the maximum distance found so far
            maxDistance = Math.max(maxDistance, distanceToNearestSpace


